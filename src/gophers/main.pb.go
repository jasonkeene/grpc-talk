// Code generated by protoc-gen-go. DO NOT EDIT.
// source: main.proto

/*
Package gophers is a generated protocol buffer package.

It is generated from these files:
	main.proto

It has these top-level messages:
	GopherRequest
	Gopher
	ChatMessage
*/
package gophers

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GopherRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GopherRequest) Reset()                    { *m = GopherRequest{} }
func (m *GopherRequest) String() string            { return proto.CompactTextString(m) }
func (*GopherRequest) ProtoMessage()               {}
func (*GopherRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GopherRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Gopher struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Age  uint64 `protobuf:"varint,3,opt,name=age" json:"age,omitempty"`
}

func (m *Gopher) Reset()                    { *m = Gopher{} }
func (m *Gopher) String() string            { return proto.CompactTextString(m) }
func (*Gopher) ProtoMessage()               {}
func (*Gopher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Gopher) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Gopher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Gopher) GetAge() uint64 {
	if m != nil {
		return m.Age
	}
	return 0
}

type ChatMessage struct {
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Content   string                     `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *ChatMessage) Reset()                    { *m = ChatMessage{} }
func (m *ChatMessage) String() string            { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()               {}
func (*ChatMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ChatMessage) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *ChatMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*GopherRequest)(nil), "gophers.GopherRequest")
	proto.RegisterType((*Gopher)(nil), "gophers.Gopher")
	proto.RegisterType((*ChatMessage)(nil), "gophers.ChatMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GopherAPI service

type GopherAPIClient interface {
	GetGopher(ctx context.Context, in *GopherRequest, opts ...grpc.CallOption) (*Gopher, error)
	StreamGophers(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (GopherAPI_StreamGophersClient, error)
	UploadGophers(ctx context.Context, opts ...grpc.CallOption) (GopherAPI_UploadGophersClient, error)
	GopherChat(ctx context.Context, opts ...grpc.CallOption) (GopherAPI_GopherChatClient, error)
}

type gopherAPIClient struct {
	cc *grpc.ClientConn
}

func NewGopherAPIClient(cc *grpc.ClientConn) GopherAPIClient {
	return &gopherAPIClient{cc}
}

func (c *gopherAPIClient) GetGopher(ctx context.Context, in *GopherRequest, opts ...grpc.CallOption) (*Gopher, error) {
	out := new(Gopher)
	err := grpc.Invoke(ctx, "/gophers.GopherAPI/GetGopher", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopherAPIClient) StreamGophers(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (GopherAPI_StreamGophersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GopherAPI_serviceDesc.Streams[0], c.cc, "/gophers.GopherAPI/StreamGophers", opts...)
	if err != nil {
		return nil, err
	}
	x := &gopherAPIStreamGophersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GopherAPI_StreamGophersClient interface {
	Recv() (*Gopher, error)
	grpc.ClientStream
}

type gopherAPIStreamGophersClient struct {
	grpc.ClientStream
}

func (x *gopherAPIStreamGophersClient) Recv() (*Gopher, error) {
	m := new(Gopher)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gopherAPIClient) UploadGophers(ctx context.Context, opts ...grpc.CallOption) (GopherAPI_UploadGophersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GopherAPI_serviceDesc.Streams[1], c.cc, "/gophers.GopherAPI/UploadGophers", opts...)
	if err != nil {
		return nil, err
	}
	x := &gopherAPIUploadGophersClient{stream}
	return x, nil
}

type GopherAPI_UploadGophersClient interface {
	Send(*Gopher) error
	CloseAndRecv() (*google_protobuf1.Empty, error)
	grpc.ClientStream
}

type gopherAPIUploadGophersClient struct {
	grpc.ClientStream
}

func (x *gopherAPIUploadGophersClient) Send(m *Gopher) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gopherAPIUploadGophersClient) CloseAndRecv() (*google_protobuf1.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(google_protobuf1.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gopherAPIClient) GopherChat(ctx context.Context, opts ...grpc.CallOption) (GopherAPI_GopherChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GopherAPI_serviceDesc.Streams[2], c.cc, "/gophers.GopherAPI/GopherChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &gopherAPIGopherChatClient{stream}
	return x, nil
}

type GopherAPI_GopherChatClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type gopherAPIGopherChatClient struct {
	grpc.ClientStream
}

func (x *gopherAPIGopherChatClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gopherAPIGopherChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GopherAPI service

type GopherAPIServer interface {
	GetGopher(context.Context, *GopherRequest) (*Gopher, error)
	StreamGophers(*google_protobuf1.Empty, GopherAPI_StreamGophersServer) error
	UploadGophers(GopherAPI_UploadGophersServer) error
	GopherChat(GopherAPI_GopherChatServer) error
}

func RegisterGopherAPIServer(s *grpc.Server, srv GopherAPIServer) {
	s.RegisterService(&_GopherAPI_serviceDesc, srv)
}

func _GopherAPI_GetGopher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GopherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopherAPIServer).GetGopher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gophers.GopherAPI/GetGopher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopherAPIServer).GetGopher(ctx, req.(*GopherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GopherAPI_StreamGophers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GopherAPIServer).StreamGophers(m, &gopherAPIStreamGophersServer{stream})
}

type GopherAPI_StreamGophersServer interface {
	Send(*Gopher) error
	grpc.ServerStream
}

type gopherAPIStreamGophersServer struct {
	grpc.ServerStream
}

func (x *gopherAPIStreamGophersServer) Send(m *Gopher) error {
	return x.ServerStream.SendMsg(m)
}

func _GopherAPI_UploadGophers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GopherAPIServer).UploadGophers(&gopherAPIUploadGophersServer{stream})
}

type GopherAPI_UploadGophersServer interface {
	SendAndClose(*google_protobuf1.Empty) error
	Recv() (*Gopher, error)
	grpc.ServerStream
}

type gopherAPIUploadGophersServer struct {
	grpc.ServerStream
}

func (x *gopherAPIUploadGophersServer) SendAndClose(m *google_protobuf1.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gopherAPIUploadGophersServer) Recv() (*Gopher, error) {
	m := new(Gopher)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GopherAPI_GopherChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GopherAPIServer).GopherChat(&gopherAPIGopherChatServer{stream})
}

type GopherAPI_GopherChatServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type gopherAPIGopherChatServer struct {
	grpc.ServerStream
}

func (x *gopherAPIGopherChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gopherAPIGopherChatServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GopherAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gophers.GopherAPI",
	HandlerType: (*GopherAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGopher",
			Handler:    _GopherAPI_GetGopher_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGophers",
			Handler:       _GopherAPI_StreamGophers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadGophers",
			Handler:       _GopherAPI_UploadGophers_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GopherChat",
			Handler:       _GopherAPI_GopherChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "main.proto",
}

func init() { proto.RegisterFile("main.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x50, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x65, 0xdb, 0xd2, 0x92, 0x29, 0x55, 0x19, 0x44, 0xc2, 0x7a, 0x68, 0xe9, 0x29, 0xa7, 0x6d,
	0xa9, 0x1e, 0x44, 0x44, 0x10, 0x91, 0xe2, 0x41, 0x90, 0xa8, 0x1f, 0xb0, 0x35, 0x63, 0x1a, 0xe8,
	0x66, 0x63, 0x76, 0x7b, 0xf0, 0xcb, 0xbd, 0x4a, 0x76, 0x93, 0x6a, 0xa3, 0xde, 0x66, 0xde, 0xbc,
	0xf7, 0xf6, 0xed, 0x03, 0x50, 0x32, 0xcb, 0x45, 0x51, 0x6a, 0xab, 0x71, 0x90, 0xea, 0x62, 0x4d,
	0xa5, 0xe1, 0xe3, 0x54, 0xeb, 0x74, 0x43, 0x33, 0x07, 0xaf, 0xb6, 0x6f, 0x33, 0x9b, 0x29, 0x32,
	0x56, 0xaa, 0xc2, 0x33, 0xf9, 0x69, 0x9b, 0x40, 0xaa, 0xb0, 0x1f, 0xfe, 0x38, 0x1d, 0xc3, 0x68,
	0xe9, 0x8c, 0x62, 0x7a, 0xdf, 0x92, 0xb1, 0x78, 0x00, 0x9d, 0x2c, 0x09, 0xd9, 0x84, 0x45, 0x41,
	0xdc, 0xc9, 0x92, 0xe9, 0x35, 0xf4, 0x3d, 0xa1, 0x7d, 0x41, 0x84, 0x5e, 0x2e, 0x15, 0x85, 0x1d,
	0x87, 0xb8, 0x19, 0x8f, 0xa0, 0x2b, 0x53, 0x0a, 0xbb, 0x13, 0x16, 0xf5, 0xe2, 0x6a, 0x9c, 0x4a,
	0x18, 0xde, 0xae, 0xa5, 0x7d, 0x20, 0x63, 0x64, 0x4a, 0x78, 0x01, 0xc1, 0x2e, 0x9f, 0xf3, 0x1a,
	0x2e, 0xb8, 0xf0, 0x01, 0x45, 0x13, 0x50, 0x3c, 0x37, 0x8c, 0xf8, 0x9b, 0x8c, 0x21, 0x0c, 0x5e,
	0x75, 0x6e, 0x29, 0xb7, 0xf5, 0x8b, 0xcd, 0xba, 0xf8, 0x64, 0x10, 0xf8, 0x8c, 0x37, 0x8f, 0xf7,
	0x78, 0x0e, 0xc1, 0x92, 0x6c, 0x9d, 0xf9, 0x44, 0xd4, 0x35, 0x89, 0xbd, 0x5f, 0xf2, 0xc3, 0x16,
	0x8e, 0x97, 0x30, 0x7a, 0xb2, 0x25, 0x49, 0xe5, 0x77, 0xe3, 0x94, 0xfb, 0xa9, 0xee, 0xaa, 0xda,
	0x7e, 0x29, 0xe7, 0xac, 0xd2, 0xbe, 0x14, 0x1b, 0x2d, 0x93, 0x46, 0xdb, 0xe6, 0xf0, 0x7f, 0xcc,
	0x22, 0x86, 0x57, 0x00, 0x9e, 0x53, 0x95, 0x84, 0xc7, 0x3b, 0xe1, 0x8f, 0xce, 0xf8, 0x9f, 0x68,
	0xc4, 0xe6, 0x6c, 0xd5, 0x77, 0x7e, 0x67, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xda, 0x55, 0xb9,
	0x4e, 0x19, 0x02, 0x00, 0x00,
}
